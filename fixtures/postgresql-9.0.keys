# zabbix_agent_bench keyfile for libzbxpgsql
# see: https://github.com/cavaliercoder/zabbix_agent_bench
# requires v0.3.0+
#
# run a simple pass/fail test with:
#   zabbix_agent_bench -keys zabbix_agent_bench.keys -iterations=1 -strict

pg.modver
pg.connect[{%PGCONN},{%PGDATABASE}]
pg.version[{%PGCONN},{%PGDATABASE}]
pg.starttime[{%PGCONN},{%PGDATABASE}]
pg.uptime[{%PGCONN},{%PGDATABASE}]

pg.setting.discovery[{%PGCONN},{%PGDATABASE}]
    pg.setting[{%PGCONN},{%PGDATABASE},{#SETTING}]

pg.query.string[{%PGCONN},{%PGDATABASE},SELECT 'Lorem ipsem dolor';]
pg.query.integer[{%PGCONN},{%PGDATABASE},SELECT 1234;]
pg.query.double[{%PGCONN},{%PGDATABASE},SELECT 1234.0;]
pg.query.discovery[{%PGCONN},{%PGDATABASE},SELECT * FROM pg_database]

pg.backends.count[{%PGCONN},{%PGDATABASE}]
pg.backends.count[{%PGCONN},{%PGDATABASE},postgres]
pg.backends.count[{%PGCONN},{%PGDATABASE},,postgres]
pg.backends.count[{%PGCONN},{%PGDATABASE},,,192.168.59.103]
pg.backends.count[{%PGCONN},{%PGDATABASE},,,,true]
pg.backends.count[{%PGCONN},{%PGDATABASE},postgres,postgres,192.168.59.3,false]

pg.checkpoints_timed[{%PGCONN},{%PGDATABASE}]
pg.checkpoints_req[{%PGCONN},{%PGDATABASE}]
pg.buffers_checkpoint[{%PGCONN},{%PGDATABASE}]
pg.buffers_clean[{%PGCONN},{%PGDATABASE}]
pg.maxwritten_clean[{%PGCONN},{%PGDATABASE}]
pg.buffers_backend[{%PGCONN},{%PGDATABASE}]
pg.buffers_alloc[{%PGCONN},{%PGDATABASE}]

# database discovery
pg.db.discovery[{%PGCONN},postgres]
	pg.db.size[{%PGCONN},postgres,{#DATABASE}]
    pg.db.numbackends[{%PGCONN},postgres,{#DATABASE}]
    pg.db.xact_commit[{%PGCONN},postgres,{#DATABASE}]
    pg.db.xact_rollback[{%PGCONN},postgres,{#DATABASE}]
    pg.db.blks_read[{%PGCONN},postgres,{#DATABASE}]
    pg.db.blks_hit[{%PGCONN},postgres,{#DATABASE}]
    pg.db.tup_returned[{%PGCONN},postgres,{#DATABASE}]
    pg.db.tup_fetched[{%PGCONN},postgres,{#DATABASE}]
    pg.db.tup_inserted[{%PGCONN},postgres,{#DATABASE}]
    pg.db.tup_updated[{%PGCONN},postgres,{#DATABASE}]
    pg.db.tup_deleted[{%PGCONN},postgres,{#DATABASE}]

# table discovery
pg.table.discovery[{%PGCONN},postgres]
    pg.table.children[{%PGCONN},{#DATABASE},{#TABLE}]
    pg.table.children.size[{%PGCONN},{#DATABASE},{#TABLE}]
    pg.table.children.tuples[{%PGCONN},{#DATABASE},{#TABLE}]
    
    pg.table.seq_scan[{%PGCONN},{#DATABASE},{#TABLE}]
    pg.table.seq_tup_read[{%PGCONN},{#DATABASE},{#TABLE}]
    pg.table.idx_scan[{%PGCONN},{#DATABASE},{#TABLE}]
    pg.table.idx_tup_fetch[{%PGCONN},{#DATABASE},{#TABLE}]
    pg.table.n_tup_ins[{%PGCONN},{#DATABASE},{#TABLE}]
    pg.table.n_tup_upd[{%PGCONN},{#DATABASE},{#TABLE}]
    pg.table.n_tup_del[{%PGCONN},{#DATABASE},{#TABLE}]
    pg.table.n_tup_hot_upd[{%PGCONN},{#DATABASE},{#TABLE}]
    pg.table.n_live_tup[{%PGCONN},{#DATABASE},{#TABLE}]
    pg.table.n_dead_tup[{%PGCONN},{#DATABASE},{#TABLE}]
    pg.table.last_vacuum[{%PGCONN},{#DATABASE},{#TABLE}]
    pg.table.last_autovacuum[{%PGCONN},{#DATABASE},{#TABLE}]
    pg.table.last_analyze[{%PGCONN},{#DATABASE},{#TABLE}]
    pg.table.last_autoanalyze[{%PGCONN},{#DATABASE},{#TABLE}]
    
    pg.table.heap_blks_read[{%PGCONN},{#DATABASE},{#TABLE}]
    pg.table.heap_blks_hit[{%PGCONN},{#DATABASE},{#TABLE}]
    pg.table.idx_blks_read[{%PGCONN},{#DATABASE},{#TABLE}]
    pg.table.idx_blks_hit[{%PGCONN},{#DATABASE},{#TABLE}]
    pg.table.toast_blks_read[{%PGCONN},{#DATABASE},{#TABLE}]
    pg.table.toast_blks_hit[{%PGCONN},{#DATABASE},{#TABLE}]
    pg.table.tidx_blks_read[{%PGCONN},{#DATABASE},{#TABLE}]
    pg.table.tidx_blks_hit[{%PGCONN},{#DATABASE},{#TABLE}]

# sum totals for tables
pg.table.size[{%PGCONN},postgres]
pg.table.seq_scan[{%PGCONN},postgres]
pg.table.seq_tup_read[{%PGCONN},postgres]
pg.table.idx_scan[{%PGCONN},postgres]
pg.table.idx_tup_fetch[{%PGCONN},postgres]
pg.table.n_tup_ins[{%PGCONN},postgres]
pg.table.n_tup_upd[{%PGCONN},postgres]
pg.table.n_tup_del[{%PGCONN},postgres]
pg.table.n_tup_hot_upd[{%PGCONN},postgres]
pg.table.n_live_tup[{%PGCONN},postgres]
pg.table.n_dead_tup[{%PGCONN},postgres]
pg.table.heap_blks_read[{%PGCONN},postgres]
pg.table.heap_blks_hit[{%PGCONN},postgres]
pg.table.idx_blks_read[{%PGCONN},postgres]
pg.table.idx_blks_hit[{%PGCONN},postgres]
pg.table.toast_blks_read[{%PGCONN},postgres]
pg.table.toast_blks_hit[{%PGCONN},postgres]
pg.table.tidx_blks_read[{%PGCONN},postgres]
pg.table.tidx_blks_hit[{%PGCONN},postgres]

# index discovery
pg.index.discovery[{%PGCONN},postgres]
    pg.index.size[{%PGCONN},{#DATABASE},{#INDEX}]
    pg.index.rows[{%PGCONN},{#DATABASE},{#INDEX}]
